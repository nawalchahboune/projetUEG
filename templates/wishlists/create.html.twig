{# 

    @authors 
    - KELA Wydie (Binôme 14)
    - LALE Ny (Binôme 14)
#}
{% extends 'base.html.twig' %}

{% block title %}Créer une nouvelle liste de souhaits{% endblock %}

{% block body %}
<div class="container mt-5">
  <div class="row">
    <div class="col-md-8 mx-auto">
      <div class="card shadow-lg border-light rounded-3">
        <div class="card-header text-white text-center" style="background-color: #00B8DE;">
          <h1 class="h3 mb-0">Créer une nouvelle liste de souhaits</h1>
        </div>
        <div class="card-body p-5">
          {{ form_start(form) }}

          <!-- Champs pour le nom et la date limite -->
          <div class="mb-4">
            {{ form_row(form.name) }}
          </div>
          <div class="mb-4">
            {{ form_row(form.deadline) }}
          </div>

          <!-- Section pour partager la liste via l'ajout d'un collaborateur -->
          <div class="mb-4">
            <label for="collaborator_username" class="fw-bold text-dark">Partager avec</label>
            <div class="input-group">
              <input type="text" id="collaborator_username" class="form-control" placeholder="Entrez le username de la personne">
              <button type="button" id="add_collaborator_btn" class="btn btn-outline-secondary">Ajouter</button>
            </div>
            <small class="form-text text-muted">Ajoutez le username de la personne avec laquelle vous souhaitez partager la liste.</small>
          </div>

          <!-- Conteneur pour afficher les collaborateurs ajoutés -->
          <div id="collaborators_list" class="mb-4">
            <ul class="list-group"></ul>
          </div>

          <!-- Champ caché pour stocker les usernames (séparés par une virgule) -->
          <input type="hidden" id="collaborators_hidden" name="collaborators_hidden" value="">

          <div class="d-grid gap-3 d-md-flex justify-content-md-between mt-4">
            <a href="{{ path('app_wishlists_index') }}" class="btn btn-outline-dark px-4 py-2 shadow-sm mb-3">
              <i class="fas fa-times-circle me-2"></i> Annuler
            </a>
            <button type="submit" class="btn btn-primary px-4 py-2 shadow-sm mt-3">
              <i class="fas fa-save me-2"></i> Créer la liste
            </button>
          </div>

          {{ form_end(form) }}
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block javascripts %}
  {{ parent() }}
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const addBtn = document.getElementById('add_collaborator_btn');
      const collaboratorInput = document.getElementById('collaborator_username');
      const collaboratorsList = document.querySelector('#collaborators_list ul');
      const hiddenField = document.getElementById('collaborators_hidden');

      // Met à jour le champ caché en concaténant les usernames ajoutés
      function updateHiddenField() {
        const usernames = [];
        collaboratorsList.querySelectorAll('li').forEach(li => {
          usernames.push(li.getAttribute('data-username'));
        });
        hiddenField.value = usernames.join(',');
      }

      addBtn.addEventListener('click', function() {
        let username = collaboratorInput.value.trim();
        console.log("Avant nettoyage: " + username);
        // Nettoyer : retirer les guillemets s'ils sont présents en début et fin de chaîne
        if ((username.startsWith('"') && username.endsWith('"')) ||
            (username.startsWith("'") && username.endsWith("'"))) {
          username = username.substring(1, username.length - 1);
        }
        console.log("Après nettoyage: " + username);

        if (!username) {
          alert('Veuillez saisir un username.');
          return;
        }
        // Vérifier si le username est déjà ajouté
        if (collaboratorsList.querySelector(`li[data-username="${username}"]`)) {
          alert('Ce collaborateur est déjà ajouté.');
          return;
        }
        // Envoi AJAX pour vérifier l'existence du username
        fetch('{{ path("app_check_username") }}', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: 'username=' + encodeURIComponent(username)
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Utilisateur non trouvé');
          }
          return response.json();
        })
        .then(data => {
          // Ajoute le collaborateur dans la liste affichée
          const li = document.createElement('li');
          li.classList.add('list-group-item', 'd-flex', 'justify-content-between', 'align-items-center');
          li.setAttribute('data-username', username);
          li.textContent = username;
          const removeBtn = document.createElement('button');
          removeBtn.type = 'button';
          removeBtn.classList.add('btn', 'btn-sm', 'btn-danger');
          removeBtn.textContent = 'X';
          removeBtn.addEventListener('click', function() {
            li.remove();
            updateHiddenField();
          });
          li.appendChild(removeBtn);
          collaboratorsList.appendChild(li);
          updateHiddenField();
          collaboratorInput.value = '';
        })
        .catch(error => {
          alert('Le username "' + username + '" n\'existe pas.');
        });
      });
    });
  </script>
{% endblock %}
